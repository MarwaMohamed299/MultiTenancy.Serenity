{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Tenant/TenantPage.tsx", "../../../../../Modules/Administration/Tenant/TenantGrid.tsx", "../../../../../Modules/Administration/Tenant/TenantDialog.tsx", "../../../../../Modules/ServerTypes/Modules/Administration.Tenant.TenantRow.ts", "../../../../../Modules/ServerTypes/Modules/Administration.Tenant.TenantForm.ts", "../../../../../Modules/ServerTypes/Modules/Administration.Tenant.TenantService.ts", "../../../../../Modules/ServerTypes/Modules/Administration.Tenant.TenantColumns.ts"],
  "sourcesContent": ["\uFEFFimport { gridPageInit } from '@serenity-is/corelib';\r\nimport { TenantGrid } from './TenantGrid';\r\n\r\nexport default () => gridPageInit(TenantGrid);", "import { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { TenantDialog } from './TenantDialog';\r\nimport { TenantRow } from '../../ServerTypes/Modules/Administration.Tenant.TenantRow';\r\nimport { TenantColumns } from '../../ServerTypes/Modules/Administration.Tenant.TenantColumns';\r\nimport { TenantService } from '../../ServerTypes/Modules/Administration.Tenant.TenantService';\r\n\r\n@Decorators.registerClass('MultiTenancy.Adminstration.TenantGrid')\nexport class TenantGrid extends EntityGrid<TenantRow> {\n    protected getColumnsKey() { return TenantColumns.columnsKey; }\n    protected getDialogType() { return TenantDialog; }\n    protected getRowDefinition() { return TenantRow; }\n    protected getService() { return TenantService.baseUrl; }\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { TenantRow } from '../../ServerTypes/Modules/Administration.Tenant.TenantRow';\r\nimport { TenantForm } from '../../ServerTypes/Modules/Administration.Tenant.TenantForm';\r\nimport { TenantService } from '../../ServerTypes/Modules/Administration.Tenant.TenantService';\r\n\r\n@Decorators.registerClass('MultiTenancy.Adminstration.TenantDialog')\nexport class TenantDialog extends EntityDialog<TenantRow, any> {\n    protected getFormKey() { return TenantForm.formKey; }\n    protected getRowDefinition() { return TenantRow; }\n    protected getService() { return TenantService.baseUrl; }\n\n    protected form = new TenantForm(this.idPrefix);\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface TenantRow {\n    TenantId?: number;\n    TenantName?: string;\n}\n\nexport abstract class TenantRow {\n    static readonly idProperty = 'TenantId';\n    static readonly nameProperty = 'TenantName';\n    static readonly localTextPrefix = 'Adminstration.Tenant';\n    static readonly deletePermission = 'Adminstration:Tenants';\n    static readonly insertPermission = 'Adminstration:Tenants';\n    static readonly readPermission = 'Adminstration:Tenants';\n    static readonly updatePermission = 'Adminstration:Tenants';\n\n    static readonly Fields = fieldsProxy<TenantRow>();\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface TenantForm {\n    TenantName: StringEditor;\n}\n\nexport class TenantForm extends PrefixedContext {\n    static readonly formKey = 'Adminstration.Tenant';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TenantForm.init)  {\n            TenantForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(TenantForm, [\n                'TenantName', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { TenantRow } from \"./Administration.Tenant.TenantRow\";\n\nexport namespace TenantService {\n    export const baseUrl = 'Adminstration/Tenant';\n\n    export declare function Create(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TenantRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<TenantRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TenantRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<TenantRow>>;\n\n    export const Methods = {\n        Create: \"Adminstration/Tenant/Create\",\n        Update: \"Adminstration/Tenant/Update\",\n        Delete: \"Adminstration/Tenant/Delete\",\n        Retrieve: \"Adminstration/Tenant/Retrieve\",\n        List: \"Adminstration/Tenant/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>TenantService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { TenantRow } from \"./Administration.Tenant.TenantRow\";\n\nexport interface TenantColumns {\n    TenantId: Column<TenantRow>;\n    TenantName: Column<TenantRow>;\n}\n\nexport class TenantColumns extends ColumnsBase<TenantRow> {\n    static readonly columnsKey = 'Adminstration.Tenant';\n    static readonly Fields = fieldsProxy<TenantColumns>();\n}"],
  "mappings": "0FAAC,IAAAA,EAA6B,SCA9B,IAAAC,EAAuC,SCAvC,IAAAC,EAAyC,SCAxC,IAAAC,EAA4B,SAOtB,IAAeC,EAAf,MAAeA,CAAU,CAUhC,EAVgCC,EAAAD,EAAA,aAAVA,EACF,WAAa,WADXA,EAEF,aAAe,aAFbA,EAGF,gBAAkB,uBAHhBA,EAIF,iBAAmB,wBAJjBA,EAKF,iBAAmB,wBALjBA,EAMF,eAAiB,wBANfA,EAOF,iBAAmB,wBAPjBA,EASF,UAAS,eAAuB,EAT7C,IAAeE,EAAfF,ECPN,IAAAG,EAA4D,SAMtD,IAAMC,EAAN,MAAMA,UAAmB,iBAAgB,CAI5C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAW,KAAO,CACnBA,EAAW,KAAO,GAElB,IAAIE,EAAK,kBAET,gBAAaF,EAAY,CACrB,aAAcE,CAClB,CAAC,CACL,CACJ,CACJ,EAjBgDC,EAAAH,EAAA,cAAnCA,EACO,QAAU,uBADvB,IAAMI,EAANJ,ECNN,IAAAK,EAAuK,SAGvJC,OACAA,EAAA,QAAU,uBAQVA,EAAA,QAAU,CACnB,OAAQ,8BACR,OAAQ,8BACR,OAAQ,8BACR,SAAU,gCACV,KAAM,2BACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAeC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACzC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KHHjB,IAAAK,EAAAC,EAAAC,EAKAF,EAAA,CAAC,aAAW,cAAc,yCAAyC,GAC5D,IAAMG,EAAN,MAAMA,UAAqBD,EAAA,eAA6B,CAAxD,kCAKH,KAAU,KAAO,IAAIE,EAAW,KAAK,QAAQ,EAJnC,YAAa,CAAE,OAAOA,EAAW,OAAS,CAC1C,kBAAmB,CAAE,OAAOC,CAAW,CACvC,YAAa,CAAE,OAAOC,EAAc,OAAS,CAG3D,EANOL,EAAAM,EAAAL,GAAMC,EAANK,EAAAP,EAAA,iBADPD,EACaG,GAAkDM,EAAAN,EAAA,gBAAxDO,EAAAT,EAAA,EAAME,GAAN,IAAMQ,EAANR,EINN,IAAAS,EAAyC,SASnC,IAAMC,EAAN,MAAMA,UAAsB,aAAuB,CAG1D,EAH0DC,EAAAD,EAAA,iBAA7CA,EACO,WAAa,uBADpBA,EAEO,UAAS,eAA2B,EAFjD,IAAME,EAANF,ELTP,IAAAG,EAAAC,EAAAC,EAMAF,EAAA,CAAC,aAAW,cAAc,uCAAuC,GAC1D,IAAMG,EAAN,MAAMA,UAAmBD,EAAA,aAAsB,CACxC,eAAgB,CAAE,OAAOE,EAAc,UAAY,CACnD,eAAgB,CAAE,OAAOC,CAAc,CACvC,kBAAmB,CAAE,OAAOC,CAAW,CACvC,YAAa,CAAE,OAAOC,EAAc,OAAS,CAC3D,EALON,EAAAO,EAAAN,GAAMC,EAANM,EAAAR,EAAA,eADPD,EACaG,GAAyCO,EAAAP,EAAA,cAA/CQ,EAAAV,EAAA,EAAME,GAAN,IAAMS,EAANT,EDJP,IAAOU,GAAQC,EAAA,OAAM,gBAAaC,CAAU,EAA7B",
  "names": ["import_corelib", "import_corelib", "import_corelib", "import_corelib", "_TenantRow", "__name", "TenantRow", "import_corelib", "_TenantForm", "prefix", "w0", "__name", "TenantForm", "import_corelib", "TenantService", "x", "r", "s", "o", "_TenantDialog_decorators", "_init", "_a", "_TenantDialog", "TenantForm", "TenantRow", "TenantService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "TenantDialog", "import_corelib", "_TenantColumns", "__name", "TenantColumns", "_TenantGrid_decorators", "_init", "_a", "_TenantGrid", "TenantColumns", "TenantDialog", "TenantRow", "TenantService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "TenantGrid", "TenantPage_default", "__name", "TenantGrid"]
}
